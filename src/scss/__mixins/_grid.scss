
@mixin create_grid_structure(
    $className: 'structure',
    $totalWidth: 1280px,
    $gutterWidth: 10px,
    $marginWidth: 10px,
    $columns: 0,
    $breakpoint: "tablet"
    ) { // defualt values if parameters not specified

    $gutterWidth: $gutterWidth * 2; // px
    $contentWidth: $totalWidth - $gutterWidth; // px
    $structureWidth: $contentWidth + $gutterWidth; // px
    $gridWidth: $contentWidth + $marginWidth; // px
    $margin: ((($marginWidth / 2) / $gridWidth) * 100%); // %
    $structureGutter: ($gutterWidth / $structureWidth) * 100%; // %

    
    // if gutter width is less than margin width by half then
    // margin width is not required in the calculation

    $num: $gutterWidth - $marginWidth;

    @if $num < 0 {
        $num: $gutterWidth;
    }
 
    $gridGutter: ($num / $structureWidth) * 100%; // %

    .#{$className} {
        margin: 0 auto;
        width: 100% - $structureGutter;
        max-width: $contentWidth;

        &:after {
            @extend .cf;
        }


        @if $columns > 1 {

            &.grid {
                width: 100% - $gridGutter;
                max-width: $gridWidth;
            }

            // Mobile - all col elements 100%
            [class*='col-'] {
              margin: 0 $margin ($margin*2);
              @include calcWidth(12, 12, $margin);
            }


            @include mq($from: $breakpoint) {

                // Let's float these cols
                [class*='col-'] {
                  float: left;
                }

                // Inline Block
                &.i-b {
                    font-size: 0;

                    [class*='col-'] {
                        float: none;
                        display: inline-block;
                        vertical-align: top;
                    }
                }

                @include calcColumns($columns, $margin);
            }
        }
    }
}


@mixin calcWidth($columnCount, $totalColumns, $margin) {
    $columnWidth: (100% - (($margin * 2) * $totalColumns)) / $totalColumns;
    width: ($columnCount * $columnWidth) + (($margin * 2) * ($columnCount - 1));
}


@mixin calcColumns($numberOfColumns, $margin) {

    @for $i from 1 through $numberOfColumns {

        // divide the number of columns into the increment number and look for a whole number 
        $num: $numberOfColumns / $i;
        $num2: round($numberOfColumns / $i);

        $string: "";

        @if $num == $num2 {
            $string: ".col-1-#{$num}"
        }

        .col-#{$i}-#{$numberOfColumns}, #{$string} {
            $columnWidth: (100% - (($margin * 2) * $numberOfColumns)) / $numberOfColumns;
            width: ($i * $columnWidth) + (($margin * 2) * ($i - 1));
        }
    }
}
