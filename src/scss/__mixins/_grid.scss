


@mixin create_grid_structure(
    $className: 'structure',
    $width: 1280px,
    $gutter: 10px,
    $margin: 10px,
    $columns: 0,
    $breakpoint: "tablet",
    $nestedcolumns: 4,
    $nestedGutter: 0px,
    $nestedMargin: 2px

    ) { // defualt values if parameters not specified

    $gutter: $gutter * 2; // px

    $structureWidth: $width - $gutter; // px

    $gutterWidth: -getGutterWidth($gutter, $width);

    $marginWidth: -getMarginWidth($margin, $structureWidth);


    .#{$className} {
        margin: 0 auto;
        width: 100% - $gutterWidth;
        max-width: $structureWidth;

        &.grid {
            max-width: $structureWidth + $margin;
            width: (100% - $gutterWidth) + ($marginWidth * 2);
        }

        &:after {
            @extend .cf;
        }


        @if $columns > 1 {

            // all col elements 100%
            [class*='col-'] {
              margin: 0 $marginWidth ($marginWidth*2);
              width: -getWidth($columns, $columns, $marginWidth);
            }

            [class*='col-'] .nested-grid {
                margin: 0 auto;
                width: -getWidth($columns, $columns, $marginWidth);
            }

            [class*='col-'] .nested-grid [class*='col-'] {
                margin: 0 $marginWidth ($marginWidth*2);
                width: -getWidth($columns, $columns, $marginWidth);
            }

            @include mq($from: $breakpoint) {

                // Let's float these cols
                [class*='col-'] {
                  float: left;
                }

                // Inline Block
                &.i-b {
                    font-size: 0;

                    [class*='col-'] {
                        float: none;
                        display: inline-block;
                        vertical-align: top;
                    }
                }

                @include calcColumns(
                    $columns, 
                    $marginWidth, 
                    $nestedcolumns, 
                    -getGutterWidth($nestedGutter, $width), 
                    -getMarginWidth($nestedMargin, $structureWidth)
                );
            }
        }
    }
}


@mixin calcColumns($numberOfColumns, $margin, $nestedcolumns, $gutterWidth, $marginWidth) {

    @for $i from 1 through $numberOfColumns {

        // divide the number of columns into the increment number and look for a whole number 
        $num: $numberOfColumns / $i;
        $num2: round($numberOfColumns / $i);

        $string: "";

        @if $num == $num2 {
            $string: ".col-1-#{$num}"
        }

        .col-#{$i}-#{$numberOfColumns}, #{$string} {
            width: -getWidth($i, $numberOfColumns, $margin);

        }

        @if $nestedcolumns > 1 {
        @include nestedColumns(
                $i, 
                $numberOfColumns, 
                $nestedcolumns, 
                $gutterWidth, 
                $marginWidth
            );
        }
    }
}


@mixin nestedColumns($index, $numberOfColumns, $nestedcolumns, $gutterWidth, $marginWidth) {
    

    .col-#{$index}-#{$numberOfColumns} .nested-grid {
        margin: 0 auto;
        width: 100% - $gutterWidth;
    }

    .col-#{$index}-#{$numberOfColumns} .nested-grid [class*='col-'] {
        margin: 0 $marginWidth ($marginWidth*2);
        //width: -getWidth($nestedcolumns, $nestedcolumns, $marginWidth);
    }


    @for $i from 1 through $nestedcolumns {

        .col-#{$index}-#{$numberOfColumns} .nested-grid .col-#{$i}-4 {
            width: -getWidth($i, $nestedcolumns, $marginWidth);
        }
    }   
}


/* *********************************************************
 *
 *
 * FUNCTIONS
 *
 *
 * *********************************************************/

@function -getGutterWidth($gutter, $width) {
    @return ($gutter / $width) * 100%; // %
}

@function -getMarginWidth($margin, $width) {
    @return ((($margin / 2) / $width) * 100%); // %
}
    

@function -getWidth($columnCount, $totalColumns, $margin) {
    $columnWidth: (100% - (($margin * 2) * $totalColumns)) / $totalColumns;
    @return ($columnCount * $columnWidth) + (($margin * 2) * ($columnCount - 1));
}
